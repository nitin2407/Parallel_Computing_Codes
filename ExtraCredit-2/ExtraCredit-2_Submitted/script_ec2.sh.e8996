++ (( n=4 ))
++ (( n<=16 ))
+++ ./seq 4
++ seq=1.90735e-06
+++ printf %.10f 1.90735e-06
++ seq=0.0000019074
++ (( threads=2 ))
++ (( threads<=32 ))
+++ ./openmp 4 2
++ par=0.000118971
+++ printf %.10f 0.000118971
++ par=0.0001189710
+++ echo 0.0000019074/0.0001189710
+++ bc -l
++ echo 2 .01603247850316463676
+++ mpirun -n 2 ./mpi 4
++ par=2.98023e-05
+++ printf %.10f 2.98023e-05
++ par=0.0000298023
+++ echo 0.0000019074/0.0000298023
+++ bc -l
++ echo 2 .06400177167534049385
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 4 4
++ par=0.000169039
+++ printf %.10f 0.000169039
++ par=0.0001690390
+++ bc -l
+++ echo 0.0000019074/0.0001690390
++ echo 4 .01128378658179473375
+++ mpirun -n 4 ./mpi 4
++ par=7.70092e-05
+++ printf %.10f 7.70092e-05
++ par=0.0000770092
+++ echo 0.0000019074/0.0000770092
+++ bc -l
++ echo 4 .02476846922185920643
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 4 8
++ par=0.000172138
+++ printf %.10f 0.000172138
++ par=0.0001721380
+++ echo 0.0000019074/0.0001721380
+++ bc -l
++ echo 8 .01108064459910072151
+++ mpirun -n 8 ./mpi 4
++ par=7.89165e-05
+++ printf %.10f 7.89165e-05
++ par=0.0000789165
+++ echo 0.0000019074/0.0000789165
+++ bc -l
++ echo 8 .02416985041151090076
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 4 16
++ par=0.000262022
+++ printf %.10f 0.000262022
++ par=0.0002620220
+++ echo 0.0000019074/0.0002620220
+++ bc -l
++ echo 16 .00727954141255314439
+++ mpirun -n 16 ./mpi 4
++ par=0.000100136
+++ printf %.10f 0.000100136
++ par=0.0001001360
+++ echo 0.0000019074/0.0001001360
+++ bc -l
++ echo 16 .01904809459135575617
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 4 32
++ par=0.000424147
+++ printf %.10f 0.000424147
++ par=0.0004241470
+++ echo 0.0000019074/0.0004241470
+++ bc -l
++ echo 32 .00449702579530210045
+++ mpirun -n 32 ./mpi 4
++ par=0.01212
+++ printf %.10f 0.01212
++ par=0.0121200000
+++ echo 0.0000019074/0.0121200000
+++ bc -l
++ echo 32 .00015737623762376237
++ (( threads=threads*2 ))
++ (( threads<=32 ))
++ gnuplot -e 'inp = '\''data/outEC2_openmp_4.dat'\''; out='\''plots/plotEC2_openmp_4.png'\''; titl='\''SpeedUp Vs Processor Plot for n=4'\''' plot.sh
++ gnuplot -e 'inp = '\''data/outEC2_mpi_4.dat'\''; out='\''plots/plotEC2_mpi_4.png'\''; titl='\''SpeedUp Vs Processor Plot for n=4'\''' plot.sh
++ (( n=n+2 ))
++ (( n<=16 ))
+++ ./seq 6
++ seq=2.19345e-05
+++ printf %.10f 2.19345e-05
++ seq=0.0000219345
++ (( threads=2 ))
++ (( threads<=32 ))
+++ ./openmp 6 2
++ par=8.58307e-05
+++ printf %.10f 8.58307e-05
++ par=0.0000858307
+++ bc -l
+++ echo 0.0000219345/0.0000858307
++ echo 2 .25555541315636479721
+++ mpirun -n 2 ./mpi 6
++ par=3.91006e-05
+++ printf %.10f 3.91006e-05
++ par=0.0000391006
+++ bc -l
+++ echo 0.0000219345/0.0000391006
++ echo 2 .56097604640337999928
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 6 4
++ par=0.000120878
+++ printf %.10f 0.000120878
++ par=0.0001208780
+++ bc -l
+++ echo 0.0000219345/0.0001208780
++ echo 4 .18145981899104882608
+++ mpirun -n 4 ./mpi 6
++ par=3.8147e-05
+++ printf %.10f 3.8147e-05
++ par=0.0000381470
+++ bc -l
+++ echo 0.0000219345/0.0000381470
++ echo 4 .57499934464046976171
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 6 8
++ par=0.000209808
+++ printf %.10f 0.000209808
++ par=0.0002098080
+++ bc -l
+++ echo 0.0000219345/0.0002098080
++ echo 8 .10454558453443148021
+++ mpirun -n 8 ./mpi 6
++ par=8.39233e-05
+++ printf %.10f 8.39233e-05
++ par=0.0000839233
+++ echo 0.0000219345/0.0000839233
+++ bc -l
++ echo 8 .26136364990413865994
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 6 16
++ par=0.000324011
+++ printf %.10f 0.000324011
++ par=0.0003240110
+++ echo 0.0000219345/0.0003240110
+++ bc -l
++ echo 16 .06769677572675001774
+++ mpirun -n 16 ./mpi 6
++ par=0.000185013
+++ printf %.10f 0.000185013
++ par=0.0001850130
+++ echo 0.0000219345/0.0001850130
+++ bc -l
++ echo 16 .11855653386518785166
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 6 32
++ par=0.00125504
+++ printf %.10f 0.00125504
++ par=0.0012550400
+++ echo 0.0000219345/0.0012550400
+++ bc -l
++ echo 32 .01747713220295767465
+++ mpirun -n 32 ./mpi 6
++ par=0.00336409
+++ printf %.10f 0.00336409
++ par=0.0033640900
+++ echo 0.0000219345/0.0033640900
+++ bc -l
++ echo 32 .00652018822326394359
++ (( threads=threads*2 ))
++ (( threads<=32 ))
++ gnuplot -e 'inp = '\''data/outEC2_openmp_6.dat'\''; out='\''plots/plotEC2_openmp_6.png'\''; titl='\''SpeedUp Vs Processor Plot for n=6'\''' plot.sh
++ gnuplot -e 'inp = '\''data/outEC2_mpi_6.dat'\''; out='\''plots/plotEC2_mpi_6.png'\''; titl='\''SpeedUp Vs Processor Plot for n=6'\''' plot.sh
++ (( n=n+2 ))
++ (( n<=16 ))
+++ ./seq 8
++ seq=0.00036788
+++ printf %.10f 0.00036788
++ seq=0.0003678800
++ (( threads=2 ))
++ (( threads<=32 ))
+++ ./openmp 8 2
++ par=0.00025177
+++ printf %.10f 0.00025177
++ par=0.0002517700
+++ echo 0.0003678800/0.0002517700
+++ bc -l
++ echo 2 1.46117488183659689399
+++ mpirun -n 2 ./mpi 8
++ par=9.98974e-05
+++ printf %.10f 9.98974e-05
++ par=0.0000998974
+++ bc -l
+++ echo 0.0003678800/0.0000998974
++ echo 2 3.68257832536182122858
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 8 4
++ par=0.000190973
+++ printf %.10f 0.000190973
++ par=0.0001909730
+++ echo 0.0003678800/0.0001909730
+++ bc -l
++ echo 4 1.92634560906515580736
+++ mpirun -n 4 ./mpi 8
++ par=9.98974e-05
+++ printf %.10f 9.98974e-05
++ par=0.0000998974
+++ echo 0.0003678800/0.0000998974
+++ bc -l
++ echo 4 3.68257832536182122858
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 8 8
++ par=0.00048399
+++ printf %.10f 0.00048399
++ par=0.0004839900
+++ echo 0.0003678800/0.0004839900
+++ bc -l
++ echo 8 .76009834913944502985
+++ mpirun -n 8 ./mpi 8
++ par=6.50883e-05
+++ printf %.10f 6.50883e-05
++ par=0.0000650883
+++ echo 0.0003678800/0.0000650883
+++ bc -l
++ echo 8 5.65201426370023491165
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 8 16
++ par=0.00111699
+++ printf %.10f 0.00111699
++ par=0.0011169900
+++ echo 0.0003678800/0.0011169900
+++ bc -l
++ echo 16 .32934941225973374873
+++ mpirun -n 16 ./mpi 8
++ par=0.000106096
+++ printf %.10f 0.000106096
++ par=0.0001060960
+++ echo 0.0003678800/0.0001060960
+++ bc -l
++ echo 16 3.46742572764288945860
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 8 32
++ par=0.000538111
+++ printf %.10f 0.000538111
++ par=0.0005381110
+++ echo 0.0003678800/0.0005381110
+++ bc -l
++ echo 32 .68365077093759465983
+++ mpirun -n 32 ./mpi 8
++ par=0.00345612
+++ printf %.10f 0.00345612
++ par=0.0034561200
+++ echo 0.0003678800/0.0034561200
+++ bc -l
++ echo 32 .10644306331956066340
++ (( threads=threads*2 ))
++ (( threads<=32 ))
++ gnuplot -e 'inp = '\''data/outEC2_openmp_8.dat'\''; out='\''plots/plotEC2_openmp_8.png'\''; titl='\''SpeedUp Vs Processor Plot for n=8'\''' plot.sh
++ gnuplot -e 'inp = '\''data/outEC2_mpi_8.dat'\''; out='\''plots/plotEC2_mpi_8.png'\''; titl='\''SpeedUp Vs Processor Plot for n=8'\''' plot.sh
++ (( n=n+2 ))
++ (( n<=16 ))
+++ ./seq 10
++ seq=0.00908804
+++ printf %.10f 0.00908804
++ seq=0.0090880400
++ (( threads=2 ))
++ (( threads<=32 ))
+++ ./openmp 10 2
++ par=0.00377798
+++ printf %.10f 0.00377798
++ par=0.0037779800
+++ echo 0.0090880400/0.0037779800
+++ bc -l
++ echo 2 2.40552888051286666419
+++ mpirun -n 2 ./mpi 10
++ par=0.00112987
+++ printf %.10f 0.00112987
++ par=0.0011298700
+++ echo 0.0090880400/0.0011298700
+++ bc -l
++ echo 2 8.04343862568260065317
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 10 4
++ par=0.00237703
+++ printf %.10f 0.00237703
++ par=0.0023770300
+++ echo 0.0090880400/0.0023770300
+++ bc -l
++ echo 4 3.82327526366936891835
+++ mpirun -n 4 ./mpi 10
++ par=0.000487089
+++ printf %.10f 0.000487089
++ par=0.0004870890
+++ echo 0.0090880400/0.0004870890
+++ bc -l
++ echo 4 18.65786334735541143405
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 10 8
++ par=0.0016489
+++ printf %.10f 0.0016489
++ par=0.0016489000
+++ echo 0.0090880400/0.0016489000
+++ bc -l
++ echo 8 5.51157741524652798835
+++ mpirun -n 8 ./mpi 10
++ par=0.000286102
+++ printf %.10f 0.000286102
++ par=0.0002861020
+++ echo 0.0090880400/0.0002861020
+++ bc -l
++ echo 8 31.76503484771165528377
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 10 16
++ par=0.0011909
+++ printf %.10f 0.0011909
++ par=0.0011909000
+++ echo 0.0090880400/0.0011909000
+++ bc -l
++ echo 16 7.63123687967083718196
+++ mpirun -n 16 ./mpi 10
++ par=0.00037694
+++ printf %.10f 0.00037694
++ par=0.0003769400
+++ echo 0.0090880400/0.0003769400
+++ bc -l
++ echo 16 24.11004403883907253143
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 10 32
++ par=0.00142503
+++ printf %.10f 0.00142503
++ par=0.0014250300
+++ echo 0.0090880400/0.0014250300
+++ bc -l
++ echo 32 6.37743766797891974204
+++ mpirun -n 32 ./mpi 10
++ par=0.00354695
+++ printf %.10f 0.00354695
++ par=0.0035469500
+++ echo 0.0090880400/0.0035469500
+++ bc -l
++ echo 32 2.56221260519601347636
++ (( threads=threads*2 ))
++ (( threads<=32 ))
++ gnuplot -e 'inp = '\''data/outEC2_openmp_10.dat'\''; out='\''plots/plotEC2_openmp_10.png'\''; titl='\''SpeedUp Vs Processor Plot for n=10'\''' plot.sh
++ gnuplot -e 'inp = '\''data/outEC2_mpi_10.dat'\''; out='\''plots/plotEC2_mpi_10.png'\''; titl='\''SpeedUp Vs Processor Plot for n=10'\''' plot.sh
++ (( n=n+2 ))
++ (( n<=16 ))
+++ ./seq 12
++ seq=0.251301
+++ printf %.10f 0.251301
++ seq=0.2513010000
++ (( threads=2 ))
++ (( threads<=32 ))
+++ ./openmp 12 2
++ par=0.108522
+++ printf %.10f 0.108522
++ par=0.1085220000
+++ echo 0.2513010000/0.1085220000
+++ bc -l
++ echo 2 2.31566871233482611820
+++ mpirun -n 2 ./mpi 12
++ par=0.0285039
+++ printf %.10f 0.0285039
++ par=0.0285039000
+++ echo 0.2513010000/0.0285039000
+++ bc -l
++ echo 2 8.81637249639523012640
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 12 4
++ par=0.0556791
+++ printf %.10f 0.0556791
++ par=0.0556791000
+++ echo 0.2513010000/0.0556791000
+++ bc -l
++ echo 4 4.51338114301416509965
+++ mpirun -n 4 ./mpi 12
++ par=0.010433
+++ printf %.10f 0.010433
++ par=0.0104330000
+++ bc -l
+++ echo 0.2513010000/0.0104330000
++ echo 4 24.08712738426147800249
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 12 8
++ par=0.0384948
+++ printf %.10f 0.0384948
++ par=0.0384948000
+++ echo 0.2513010000/0.0384948000
+++ bc -l
++ echo 8 6.52818042956451260949
+++ mpirun -n 8 ./mpi 12
++ par=0.00540185
+++ printf %.10f 0.00540185
++ par=0.0054018500
+++ echo 0.2513010000/0.0054018500
+++ bc -l
++ echo 8 46.52128437479752307079
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 12 16
++ par=0.0210581
+++ printf %.10f 0.0210581
++ par=0.0210581000
+++ echo 0.2513010000/0.0210581000
+++ bc -l
++ echo 16 11.93369772201670616057
+++ mpirun -n 16 ./mpi 12
++ par=0.00548482
+++ printf %.10f 0.00548482
++ par=0.0054848200
+++ echo 0.2513010000/0.0054848200
+++ bc -l
++ echo 16 45.81754733974861526905
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 12 32
++ par=0.0240841
+++ printf %.10f 0.0240841
++ par=0.0240841000
+++ echo 0.2513010000/0.0240841000
+++ bc -l
++ echo 32 10.43431143368446402398
+++ mpirun -n 32 ./mpi 12
++ par=0.00545692
+++ printf %.10f 0.00545692
++ par=0.0054569200
+++ echo 0.2513010000/0.0054569200
+++ bc -l
++ echo 32 46.05180211547906144858
++ (( threads=threads*2 ))
++ (( threads<=32 ))
++ gnuplot -e 'inp = '\''data/outEC2_openmp_12.dat'\''; out='\''plots/plotEC2_openmp_12.png'\''; titl='\''SpeedUp Vs Processor Plot for n=12'\''' plot.sh
++ gnuplot -e 'inp = '\''data/outEC2_mpi_12.dat'\''; out='\''plots/plotEC2_mpi_12.png'\''; titl='\''SpeedUp Vs Processor Plot for n=12'\''' plot.sh
++ (( n=n+2 ))
++ (( n<=16 ))
+++ ./seq 14
++ seq=9.61649
+++ printf %.10f 9.61649
++ seq=9.6164900000
++ (( threads=2 ))
++ (( threads<=32 ))
+++ ./openmp 14 2
++ par=4.19025
+++ printf %.10f 4.19025
++ par=4.1902500000
+++ bc -l
+++ echo 9.6164900000/4.1902500000
++ echo 2 2.29496808066344490185
+++ mpirun -n 2 ./mpi 14
++ par=0.944965
+++ printf %.10f 0.944965
++ par=0.9449650000
+++ echo 9.6164900000/0.9449650000
+++ bc -l
++ echo 2 10.17655680369114199996
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 14 4
++ par=2.32407
+++ printf %.10f 2.32407
++ par=2.3240700000
+++ echo 9.6164900000/2.3240700000
+++ bc -l
++ echo 4 4.13777984312004371641
+++ mpirun -n 4 ./mpi 14
++ par=0.417782
+++ printf %.10f 0.417782
++ par=0.4177820000
+++ echo 9.6164900000/0.4177820000
+++ bc -l
++ echo 4 23.01796152060165349392
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 14 8
++ par=1.28022
+++ printf %.10f 1.28022
++ par=1.2802200000
+++ bc -l
+++ echo 9.6164900000/1.2802200000
++ echo 8 7.51159175766665104435
+++ mpirun -n 8 ./mpi 14
++ par=0.150833
+++ printf %.10f 0.150833
++ par=0.1508330000
+++ echo 9.6164900000/0.1508330000
+++ bc -l
++ echo 8 63.75587570359271512202
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 14 16
++ par=0.701274
+++ printf %.10f 0.701274
++ par=0.7012740000
+++ echo 9.6164900000/0.7012740000
+++ bc -l
++ echo 16 13.71288540570447499836
+++ mpirun -n 16 ./mpi 14
++ par=0.149692
+++ printf %.10f 0.149692
++ par=0.1496920000
+++ echo 9.6164900000/0.1496920000
+++ bc -l
++ echo 16 64.24184325147636480239
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 14 32
++ par=0.714964
+++ printf %.10f 0.714964
++ par=0.7149640000
+++ echo 9.6164900000/0.7149640000
+++ bc -l
++ echo 32 13.45031358222232168332
+++ mpirun -n 32 ./mpi 14
++ par=0.149253
+++ printf %.10f 0.149253
++ par=0.1492530000
+++ echo 9.6164900000/0.1492530000
+++ bc -l
++ echo 32 64.43079871091368347704
++ (( threads=threads*2 ))
++ (( threads<=32 ))
++ gnuplot -e 'inp = '\''data/outEC2_openmp_14.dat'\''; out='\''plots/plotEC2_openmp_14.png'\''; titl='\''SpeedUp Vs Processor Plot for n=14'\''' plot.sh
++ gnuplot -e 'inp = '\''data/outEC2_mpi_14.dat'\''; out='\''plots/plotEC2_mpi_14.png'\''; titl='\''SpeedUp Vs Processor Plot for n=14'\''' plot.sh
++ (( n=n+2 ))
++ (( n<=16 ))
+++ ./seq 16
++ seq=483.135
+++ printf %.10f 483.135
++ seq=483.1350000000
++ (( threads=2 ))
++ (( threads<=32 ))
+++ ./openmp 16 2
++ par=209.449
+++ printf %.10f 209.449
++ par=209.4490000000
+++ bc -l
+++ echo 483.1350000000/209.4490000000
++ echo 2 2.30669518594025275842
+++ mpirun -n 2 ./mpi 16
++ par=40.7599
+++ printf %.10f 40.7599
++ par=40.7599000000
+++ echo 483.1350000000/40.7599000000
+++ bc -l
++ echo 2 11.85319394797337579336
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 16 4
++ par=107.479
+++ printf %.10f 107.479
++ par=107.4790000000
+++ bc -l
+++ echo 483.1350000000/107.4790000000
++ echo 4 4.49515719349826477730
+++ mpirun -n 4 ./mpi 16
++ par=15.7171
+++ printf %.10f 15.7171
++ par=15.7171000000
+++ echo 483.1350000000/15.7171000000
+++ bc -l
++ echo 4 30.73944938951842260976
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 16 8
++ par=57.2691
+++ printf %.10f 57.2691
++ par=57.2691000000
+++ echo 483.1350000000/57.2691000000
+++ bc -l
++ echo 8 8.43622477042593649978
+++ mpirun -n 8 ./mpi 16
++ par=10.1662
+++ printf %.10f 10.1662
++ par=10.1662000000
+++ bc -l
+++ echo 483.1350000000/10.1662000000
++ echo 8 47.52365682359190257913
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 16 16
++ par=31.2184
+++ printf %.10f 31.2184
++ par=31.2184000000
+++ echo 483.1350000000/31.2184000000
+++ bc -l
++ echo 16 15.47596930015631806883
+++ mpirun -n 16 ./mpi 16
++ par=5.77102
+++ printf %.10f 5.77102
++ par=5.7710200000
+++ echo 483.1350000000/5.7710200000
+++ bc -l
++ echo 16 83.71743643238110420688
++ (( threads=threads*2 ))
++ (( threads<=32 ))
+++ ./openmp 16 32
++ par=31.2596
+++ printf %.10f 31.2596
++ par=31.2596000000
+++ echo 483.1350000000/31.2596000000
+++ bc -l
++ echo 32 15.45557204826677244750
+++ mpirun -n 32 ./mpi 16
++ par=5.74806
+++ printf %.10f 5.74806
++ par=5.7480600000
+++ echo 483.1350000000/5.7480600000
+++ bc -l
++ echo 32 84.05183661965950251041
++ (( threads=threads*2 ))
++ (( threads<=32 ))
++ gnuplot -e 'inp = '\''data/outEC2_openmp_16.dat'\''; out='\''plots/plotEC2_openmp_16.png'\''; titl='\''SpeedUp Vs Processor Plot for n=16'\''' plot.sh
++ gnuplot -e 'inp = '\''data/outEC2_mpi_16.dat'\''; out='\''plots/plotEC2_mpi_16.png'\''; titl='\''SpeedUp Vs Processor Plot for n=16'\''' plot.sh
++ (( n=n+2 ))
++ (( n<=16 ))
++ set +x
